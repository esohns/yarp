
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_MAGIC_SPELLTYPE_H
#define RPG_MAGIC_SPELLTYPE_H

enum RPG_Magic_SpellType
{
  SPELL_NONE = 0,
  SPELL_ACID_ARROW,
  SPELL_ACID_FOG,
  SPELL_ACID_SPLASH,
  SPELL_AID,
  SPELL_AIR_WALK,
  SPELL_ALARM,
  SPELL_ALIGN_WEAPON,
  SPELL_ALTER_SELF,
  SPELL_ANALYZE_DWEOMER,
  SPELL_ANIMAL_GROWTH,
  SPELL_ANIMAL_MESSENGER,
  SPELL_ANIMAL_SHAPES,
  SPELL_ANIMAL_TRANCE,
  SPELL_ANIMATE_DEAD,
  SPELL_ANIMATE_OBJECTS,
  SPELL_ANIMATE_PLANTS,
  SPELL_ANIMATE_ROPE,
  SPELL_ANTILIFE_SHELL,
  SPELL_ANTIMAGIC_FIELD,
  SPELL_ANTIPATHY,
  SPELL_ANTIPLANT_SHELL,
  SPELL_ARCANE_EYE,
  SPELL_ARCANE_LOCK,
  SPELL_ARCANE_MARK,
  SPELL_ARCANE_SIGHT,
  SPELL_ARCANE_SIGHT_GREATER,
  SPELL_ASTRAL_PROJECTION,
  SPELL_ATONEMENT,
  SPELL_AUGURY,
  SPELL_AWAKEN,
  SPELL_BALEFUL_POLYMORPH,
  SPELL_BANE,
  SPELL_BANISHMENT,
  SPELL_BARKSKIN,
  SPELL_BEARS_ENDURANCE,
  SPELL_BEARS_ENDURANCE_MASS,
  SPELL_BESTOW_CURSE,
  SPELL_BINDING,
  SPELL_BLACK_TENTACLES,
  SPELL_BLADE_BARRIER,
  SPELL_BLASPHEMY,
  SPELL_BLESS,
  SPELL_BLESS_WATER,
  SPELL_BLESS_WEAPON,
  SPELL_BLIGHT,
  SPELL_BLINDNESS_DEAFNESS,
  SPELL_BLINK,
  SPELL_BLUR,
  SPELL_BREAK_ENCHANTMENT,
  SPELL_BULLS_STRENGTH,
  SPELL_BULLS_STRENGTH_MASS,
  SPELL_BURNING_HANDS,
  SPELL_CALL_LIGHTNING,
  SPELL_CALL_LIGHTNING_STORM,
  SPELL_CALM_ANIMALS,
  SPELL_CALM_EMOTIONS,
  SPELL_CATS_GRACE,
  SPELL_CATS_GRACE_MASS,
  SPELL_CAUSE_FEAR,
  SPELL_CHAIN_LIGHTNING,
  SPELL_CHANGESTAFF,
  SPELL_CHAOS_HAMMER,
  SPELL_CHARM_ANIMAL,
  SPELL_CHARM_MONSTER,
  SPELL_CHARM_MONSTER_MASS,
  SPELL_CHARM_PERSON,
  SPELL_CHILL_METAL,
  SPELL_CHILL_TOUCH,
  SPELL_CIRCLE_OF_DEATH,
  SPELL_CLAIRAUDIENCE_CLAIRVOYANCE,
  SPELL_CLENCHED_FIST,
  SPELL_CLOAK_OF_CHAOS,
  SPELL_CLONE,
  SPELL_CLOUDKILL,
  SPELL_COLOR_SPRAY,
  SPELL_COMMAND,
  SPELL_COMMAND_GREATER,
  SPELL_COMMAND_PLANTS,
  SPELL_COMMAND_UNDEAD,
  SPELL_COMMUNE,
  SPELL_COMMUNE_WITH_NATURE,
  SPELL_COMPREHEND_LANGUAGES,
  SPELL_CONE_OF_COLD,
  SPELL_CONFUSION,
  SPELL_CONFUSION_LESSER,
  SPELL_CONSECRATE,
  SPELL_CONTACT_OTHER_PLANE,
  SPELL_CONTAGION,
  SPELL_CONTINGENCY,
  SPELL_CONTINUAL_FLAME,
  SPELL_CONTROL_PLANTS,
  SPELL_CONTROL_UNDEAD,
  SPELL_CONTROL_WATER,
  SPELL_CONTROL_WEATHER,
  SPELL_CONTROL_WINDS,
  SPELL_CREATE_FOOD_AND_WATER,
  SPELL_CREATE_UNDEAD,
  SPELL_CREATE_UNDEAD_GREATER,
  SPELL_CREATE_WATER,
  SPELL_CREEPING_DOOM,
  SPELL_CRUSHING_DESPAIR,
  SPELL_CRUSHING_HAND,
  SPELL_CURE_WOUNDS_CRITICAL,
  SPELL_CURE_WOUNDS_CRITICAL_MASS,
  SPELL_CURE_WOUNDS_LIGHT,
  SPELL_CURE_WOUNDS_LIGHT_MASS,
  SPELL_CURE_WOUNDS_MINOR,
  SPELL_CURE_WOUNDS_MODERATE,
  SPELL_CURE_WOUNDS_MODERATE_MASS,
  SPELL_CURE_WOUNDS_SERIOUS,
  SPELL_CURE_WOUNDS_SERIOUS_MASS,
  SPELL_CURSE_WATER,
  SPELL_DANCING_LIGHTS,
  SPELL_DARKNESS,
  SPELL_DARKNESS_DEEPER,
  SPELL_DARKVISION,
  SPELL_DAYLIGHT,
  SPELL_DAZE,
  SPELL_DAZE_MONSTER,
  SPELL_DEATH_KNELL,
  SPELL_DEATH_WARD,
  SPELL_DEATHWATCH,
  SPELL_DEEP_SLUMBER,
  SPELL_DELAY_POISON,
  SPELL_DELAYED_BLAST_FIREBALL,
  SPELL_DEMAND,
  SPELL_DESECRATE,
  SPELL_DESTRUCTION,
  SPELL_DETECT_ANIMALS_PLANTS,
  SPELL_DETECT_CHAOS,
  SPELL_DETECT_EVIL,
  SPELL_DETECT_GOOD,
  SPELL_DETECT_LAW,
  SPELL_DETECT_MAGIC,
  SPELL_DETECT_POISON,
  SPELL_DETECT_SCRYING,
  SPELL_DETECT_SECRET_DOORS,
  SPELL_DETECT_SNARES_AND_PITS,
  SPELL_DETECT_THOUGHTS,
  SPELL_DETECT_UNDEAD,
  SPELL_DICTUM,
  SPELL_DIMENSION_DOOR,
  SPELL_DIMENSIONAL_ANCHOR,
  SPELL_DIMENSIONAL_LOCK,
  SPELL_DIMINISH_PLANTS,
  SPELL_DISCERN_LIES,
  SPELL_DISCERN_LOCATION,
  SPELL_DISGUISE_SELF,
  SPELL_DISINTEGRATE,
  SPELL_DISMISSAL,
  SPELL_DISPEL_CHAOS,
  SPELL_DISPEL_EVIL,
  SPELL_DISPEL_GOOD,
  SPELL_DISPEL_LAW,
  SPELL_DISPEL_MAGIC,
  SPELL_DISPEL_MAGIC_GREATER,
  SPELL_DISPLACEMENT,
  SPELL_DISRUPT_UNDEAD,
  SPELL_DISRUPTING_WEAPON,
  SPELL_DIVINATION,
  SPELL_DIVINE_FAVOR,
  SPELL_DIVINE_POWER,
  SPELL_DOMINATE_ANIMAL,
  SPELL_DOMINATE_MONSTER,
  SPELL_DOMINATE_PERSON,
  SPELL_DOOM,
  SPELL_DREAM,
  SPELL_EAGLES_SPLENDOR,
  SPELL_EAGLES_SPLENDOR_MASS,
  SPELL_ELEMENTAL_SWARM,
  SPELL_ENDURE_ELEMENTS,
  SPELL_ENERGY_DRAIN,
  SPELL_ENERVATION,
  SPELL_ENLARGE_PERSON,
  SPELL_ENLARGE_PERSON_MASS,
  SPELL_ENTANGLE,
  SPELL_ENTHRALL,
  SPELL_ENTROPIC_SHIELD,
  SPELL_ERASE,
  SPELL_ETHEREAL_JAUNT,
  SPELL_ETHEREALNESS,
  SPELL_EXPEDITIOUS_RETREAT,
  SPELL_EXPLOSIVE_RUNES,
  SPELL_EYEBITE,
  SPELL_FEAR,
  SPELL_FEEBLEMIND,
  SPELL_FIRE_STORM,
  SPELL_GASEOUS_FORM,
  SPELL_GOOD_HOPE,
  SPELL_HEAL,
  SPELL_HEAL_MASS,
  SPELL_HEAT_METAL,
  SPELL_HEROISM,
  SPELL_HOLD_MONSTER,
  SPELL_IMPLOSION,
  SPELL_INSANITY,
  SPELL_INVISIBILITY,
  SPELL_MAGIC_WEAPON,
  SPELL_MIRACLE,
  SPELL_MIRROR_IMAGE,
  SPELL_NEUTRALIZE_POISON,
  SPELL_PLANE_SHIFT,
  SPELL_PLANT_GROWTH,
  SPELL_POLYMORPH,
  SPELL_POWER_WORD_STUN,
  SPELL_PROJECT_IMAGE,
  SPELL_REMOVE_CURSE,
  SPELL_REMOVE_DISEASE,
  SPELL_REMOVE_FEAR,
  SPELL_RESTORATION,
  SPELL_RESTORATION_GREATER,
  SPELL_REVERSE_GRAVITY,
  SPELL_SCARE,
  SPELL_SEE_INVISIBILITY,
  SPELL_SILENT_IMAGE,
  SPELL_SLOW,
  SPELL_STINKING_CLOUD,
  SPELL_STONE_SHAPE,
  SPELL_SUGGESTION,
  SPELL_SUMMON_MONSTER_I,
  SPELL_SUMMON_MONSTER_III,
  SPELL_SUMMON_MONSTER_IV,
  SPELL_SUMMON_MONSTER_V,
  SPELL_SUMMON_MONSTER_IX,
  SPELL_SYMPATHY,
  SPELL_TELEKINESIS,
  SPELL_TELEPATHY,
  SPELL_TELEPORT_GREATER,
  SPELL_TONGUES,
  SPELL_TRUE_SEEING,
  SPELL_UNHOLY_AURA,
  SPELL_UNHOLY_BLIGHT,
  SPELL_WISH,
  SPELL_WISH_LIMITED,
  //
  RPG_MAGIC_SPELLTYPE_MAX,
  RPG_MAGIC_SPELLTYPE_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Magic_SpellType, std::string> RPG_Magic_SpellTypeToStringTable_t;
typedef RPG_Magic_SpellTypeToStringTable_t::const_iterator RPG_Magic_SpellTypeToStringTableIterator_t;

class RPG_Magic_SpellTypeHelper
{
 public:
  inline static void init()
  {
    myRPG_Magic_SpellTypeToStringTable.clear();
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_NONE, ACE_TEXT_ALWAYS_CHAR("SPELL_NONE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ACID_ARROW, ACE_TEXT_ALWAYS_CHAR("SPELL_ACID_ARROW")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ACID_FOG, ACE_TEXT_ALWAYS_CHAR("SPELL_ACID_FOG")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ACID_SPLASH, ACE_TEXT_ALWAYS_CHAR("SPELL_ACID_SPLASH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_AID, ACE_TEXT_ALWAYS_CHAR("SPELL_AID")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_AIR_WALK, ACE_TEXT_ALWAYS_CHAR("SPELL_AIR_WALK")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ALARM, ACE_TEXT_ALWAYS_CHAR("SPELL_ALARM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ALIGN_WEAPON, ACE_TEXT_ALWAYS_CHAR("SPELL_ALIGN_WEAPON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ALTER_SELF, ACE_TEXT_ALWAYS_CHAR("SPELL_ALTER_SELF")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANALYZE_DWEOMER, ACE_TEXT_ALWAYS_CHAR("SPELL_ANALYZE_DWEOMER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANIMAL_GROWTH, ACE_TEXT_ALWAYS_CHAR("SPELL_ANIMAL_GROWTH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANIMAL_MESSENGER, ACE_TEXT_ALWAYS_CHAR("SPELL_ANIMAL_MESSENGER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANIMAL_SHAPES, ACE_TEXT_ALWAYS_CHAR("SPELL_ANIMAL_SHAPES")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANIMAL_TRANCE, ACE_TEXT_ALWAYS_CHAR("SPELL_ANIMAL_TRANCE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANIMATE_DEAD, ACE_TEXT_ALWAYS_CHAR("SPELL_ANIMATE_DEAD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANIMATE_OBJECTS, ACE_TEXT_ALWAYS_CHAR("SPELL_ANIMATE_OBJECTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANIMATE_PLANTS, ACE_TEXT_ALWAYS_CHAR("SPELL_ANIMATE_PLANTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANIMATE_ROPE, ACE_TEXT_ALWAYS_CHAR("SPELL_ANIMATE_ROPE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANTILIFE_SHELL, ACE_TEXT_ALWAYS_CHAR("SPELL_ANTILIFE_SHELL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANTIMAGIC_FIELD, ACE_TEXT_ALWAYS_CHAR("SPELL_ANTIMAGIC_FIELD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANTIPATHY, ACE_TEXT_ALWAYS_CHAR("SPELL_ANTIPATHY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ANTIPLANT_SHELL, ACE_TEXT_ALWAYS_CHAR("SPELL_ANTIPLANT_SHELL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ARCANE_EYE, ACE_TEXT_ALWAYS_CHAR("SPELL_ARCANE_EYE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ARCANE_LOCK, ACE_TEXT_ALWAYS_CHAR("SPELL_ARCANE_LOCK")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ARCANE_MARK, ACE_TEXT_ALWAYS_CHAR("SPELL_ARCANE_MARK")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ARCANE_SIGHT, ACE_TEXT_ALWAYS_CHAR("SPELL_ARCANE_SIGHT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ARCANE_SIGHT_GREATER, ACE_TEXT_ALWAYS_CHAR("SPELL_ARCANE_SIGHT_GREATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ASTRAL_PROJECTION, ACE_TEXT_ALWAYS_CHAR("SPELL_ASTRAL_PROJECTION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ATONEMENT, ACE_TEXT_ALWAYS_CHAR("SPELL_ATONEMENT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_AUGURY, ACE_TEXT_ALWAYS_CHAR("SPELL_AUGURY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_AWAKEN, ACE_TEXT_ALWAYS_CHAR("SPELL_AWAKEN")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BALEFUL_POLYMORPH, ACE_TEXT_ALWAYS_CHAR("SPELL_BALEFUL_POLYMORPH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BANE, ACE_TEXT_ALWAYS_CHAR("SPELL_BANE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BANISHMENT, ACE_TEXT_ALWAYS_CHAR("SPELL_BANISHMENT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BARKSKIN, ACE_TEXT_ALWAYS_CHAR("SPELL_BARKSKIN")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BEARS_ENDURANCE, ACE_TEXT_ALWAYS_CHAR("SPELL_BEARS_ENDURANCE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BEARS_ENDURANCE_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_BEARS_ENDURANCE_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BESTOW_CURSE, ACE_TEXT_ALWAYS_CHAR("SPELL_BESTOW_CURSE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BINDING, ACE_TEXT_ALWAYS_CHAR("SPELL_BINDING")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLACK_TENTACLES, ACE_TEXT_ALWAYS_CHAR("SPELL_BLACK_TENTACLES")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLADE_BARRIER, ACE_TEXT_ALWAYS_CHAR("SPELL_BLADE_BARRIER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLASPHEMY, ACE_TEXT_ALWAYS_CHAR("SPELL_BLASPHEMY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLESS, ACE_TEXT_ALWAYS_CHAR("SPELL_BLESS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLESS_WATER, ACE_TEXT_ALWAYS_CHAR("SPELL_BLESS_WATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLESS_WEAPON, ACE_TEXT_ALWAYS_CHAR("SPELL_BLESS_WEAPON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLIGHT, ACE_TEXT_ALWAYS_CHAR("SPELL_BLIGHT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLINDNESS_DEAFNESS, ACE_TEXT_ALWAYS_CHAR("SPELL_BLINDNESS_DEAFNESS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLINK, ACE_TEXT_ALWAYS_CHAR("SPELL_BLINK")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BLUR, ACE_TEXT_ALWAYS_CHAR("SPELL_BLUR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BREAK_ENCHANTMENT, ACE_TEXT_ALWAYS_CHAR("SPELL_BREAK_ENCHANTMENT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BULLS_STRENGTH, ACE_TEXT_ALWAYS_CHAR("SPELL_BULLS_STRENGTH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BULLS_STRENGTH_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_BULLS_STRENGTH_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_BURNING_HANDS, ACE_TEXT_ALWAYS_CHAR("SPELL_BURNING_HANDS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CALL_LIGHTNING, ACE_TEXT_ALWAYS_CHAR("SPELL_CALL_LIGHTNING")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CALL_LIGHTNING_STORM, ACE_TEXT_ALWAYS_CHAR("SPELL_CALL_LIGHTNING_STORM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CALM_ANIMALS, ACE_TEXT_ALWAYS_CHAR("SPELL_CALM_ANIMALS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CALM_EMOTIONS, ACE_TEXT_ALWAYS_CHAR("SPELL_CALM_EMOTIONS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CATS_GRACE, ACE_TEXT_ALWAYS_CHAR("SPELL_CATS_GRACE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CATS_GRACE_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_CATS_GRACE_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CAUSE_FEAR, ACE_TEXT_ALWAYS_CHAR("SPELL_CAUSE_FEAR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHAIN_LIGHTNING, ACE_TEXT_ALWAYS_CHAR("SPELL_CHAIN_LIGHTNING")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHANGESTAFF, ACE_TEXT_ALWAYS_CHAR("SPELL_CHANGESTAFF")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHAOS_HAMMER, ACE_TEXT_ALWAYS_CHAR("SPELL_CHAOS_HAMMER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHARM_ANIMAL, ACE_TEXT_ALWAYS_CHAR("SPELL_CHARM_ANIMAL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHARM_MONSTER, ACE_TEXT_ALWAYS_CHAR("SPELL_CHARM_MONSTER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHARM_MONSTER_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_CHARM_MONSTER_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHARM_PERSON, ACE_TEXT_ALWAYS_CHAR("SPELL_CHARM_PERSON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHILL_METAL, ACE_TEXT_ALWAYS_CHAR("SPELL_CHILL_METAL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CHILL_TOUCH, ACE_TEXT_ALWAYS_CHAR("SPELL_CHILL_TOUCH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CIRCLE_OF_DEATH, ACE_TEXT_ALWAYS_CHAR("SPELL_CIRCLE_OF_DEATH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CLAIRAUDIENCE_CLAIRVOYANCE, ACE_TEXT_ALWAYS_CHAR("SPELL_CLAIRAUDIENCE_CLAIRVOYANCE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CLENCHED_FIST, ACE_TEXT_ALWAYS_CHAR("SPELL_CLENCHED_FIST")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CLOAK_OF_CHAOS, ACE_TEXT_ALWAYS_CHAR("SPELL_CLOAK_OF_CHAOS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CLONE, ACE_TEXT_ALWAYS_CHAR("SPELL_CLONE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CLOUDKILL, ACE_TEXT_ALWAYS_CHAR("SPELL_CLOUDKILL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_COLOR_SPRAY, ACE_TEXT_ALWAYS_CHAR("SPELL_COLOR_SPRAY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_COMMAND, ACE_TEXT_ALWAYS_CHAR("SPELL_COMMAND")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_COMMAND_GREATER, ACE_TEXT_ALWAYS_CHAR("SPELL_COMMAND_GREATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_COMMAND_PLANTS, ACE_TEXT_ALWAYS_CHAR("SPELL_COMMAND_PLANTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_COMMAND_UNDEAD, ACE_TEXT_ALWAYS_CHAR("SPELL_COMMAND_UNDEAD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_COMMUNE, ACE_TEXT_ALWAYS_CHAR("SPELL_COMMUNE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_COMMUNE_WITH_NATURE, ACE_TEXT_ALWAYS_CHAR("SPELL_COMMUNE_WITH_NATURE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_COMPREHEND_LANGUAGES, ACE_TEXT_ALWAYS_CHAR("SPELL_COMPREHEND_LANGUAGES")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONE_OF_COLD, ACE_TEXT_ALWAYS_CHAR("SPELL_CONE_OF_COLD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONFUSION, ACE_TEXT_ALWAYS_CHAR("SPELL_CONFUSION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONFUSION_LESSER, ACE_TEXT_ALWAYS_CHAR("SPELL_CONFUSION_LESSER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONSECRATE, ACE_TEXT_ALWAYS_CHAR("SPELL_CONSECRATE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTACT_OTHER_PLANE, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTACT_OTHER_PLANE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTAGION, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTAGION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTINGENCY, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTINGENCY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTINUAL_FLAME, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTINUAL_FLAME")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTROL_PLANTS, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTROL_PLANTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTROL_UNDEAD, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTROL_UNDEAD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTROL_WATER, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTROL_WATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTROL_WEATHER, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTROL_WEATHER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CONTROL_WINDS, ACE_TEXT_ALWAYS_CHAR("SPELL_CONTROL_WINDS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CREATE_FOOD_AND_WATER, ACE_TEXT_ALWAYS_CHAR("SPELL_CREATE_FOOD_AND_WATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CREATE_UNDEAD, ACE_TEXT_ALWAYS_CHAR("SPELL_CREATE_UNDEAD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CREATE_UNDEAD_GREATER, ACE_TEXT_ALWAYS_CHAR("SPELL_CREATE_UNDEAD_GREATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CREATE_WATER, ACE_TEXT_ALWAYS_CHAR("SPELL_CREATE_WATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CREEPING_DOOM, ACE_TEXT_ALWAYS_CHAR("SPELL_CREEPING_DOOM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CRUSHING_DESPAIR, ACE_TEXT_ALWAYS_CHAR("SPELL_CRUSHING_DESPAIR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CRUSHING_HAND, ACE_TEXT_ALWAYS_CHAR("SPELL_CRUSHING_HAND")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_CRITICAL, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_CRITICAL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_CRITICAL_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_CRITICAL_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_LIGHT, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_LIGHT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_LIGHT_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_LIGHT_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_MINOR, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_MINOR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_MODERATE, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_MODERATE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_MODERATE_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_MODERATE_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_SERIOUS, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_SERIOUS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURE_WOUNDS_SERIOUS_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_CURE_WOUNDS_SERIOUS_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_CURSE_WATER, ACE_TEXT_ALWAYS_CHAR("SPELL_CURSE_WATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DANCING_LIGHTS, ACE_TEXT_ALWAYS_CHAR("SPELL_DANCING_LIGHTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DARKNESS, ACE_TEXT_ALWAYS_CHAR("SPELL_DARKNESS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DARKNESS_DEEPER, ACE_TEXT_ALWAYS_CHAR("SPELL_DARKNESS_DEEPER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DARKVISION, ACE_TEXT_ALWAYS_CHAR("SPELL_DARKVISION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DAYLIGHT, ACE_TEXT_ALWAYS_CHAR("SPELL_DAYLIGHT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DAZE, ACE_TEXT_ALWAYS_CHAR("SPELL_DAZE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DAZE_MONSTER, ACE_TEXT_ALWAYS_CHAR("SPELL_DAZE_MONSTER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DEATH_KNELL, ACE_TEXT_ALWAYS_CHAR("SPELL_DEATH_KNELL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DEATH_WARD, ACE_TEXT_ALWAYS_CHAR("SPELL_DEATH_WARD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DEATHWATCH, ACE_TEXT_ALWAYS_CHAR("SPELL_DEATHWATCH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DEEP_SLUMBER, ACE_TEXT_ALWAYS_CHAR("SPELL_DEEP_SLUMBER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DELAY_POISON, ACE_TEXT_ALWAYS_CHAR("SPELL_DELAY_POISON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DELAYED_BLAST_FIREBALL, ACE_TEXT_ALWAYS_CHAR("SPELL_DELAYED_BLAST_FIREBALL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DEMAND, ACE_TEXT_ALWAYS_CHAR("SPELL_DEMAND")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DESECRATE, ACE_TEXT_ALWAYS_CHAR("SPELL_DESECRATE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DESTRUCTION, ACE_TEXT_ALWAYS_CHAR("SPELL_DESTRUCTION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_ANIMALS_PLANTS, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_ANIMALS_PLANTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_CHAOS, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_CHAOS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_EVIL, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_EVIL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_GOOD, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_GOOD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_LAW, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_LAW")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_MAGIC, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_MAGIC")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_POISON, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_POISON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_SCRYING, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_SCRYING")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_SECRET_DOORS, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_SECRET_DOORS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_SNARES_AND_PITS, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_SNARES_AND_PITS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_THOUGHTS, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_THOUGHTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DETECT_UNDEAD, ACE_TEXT_ALWAYS_CHAR("SPELL_DETECT_UNDEAD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DICTUM, ACE_TEXT_ALWAYS_CHAR("SPELL_DICTUM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DIMENSION_DOOR, ACE_TEXT_ALWAYS_CHAR("SPELL_DIMENSION_DOOR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DIMENSIONAL_ANCHOR, ACE_TEXT_ALWAYS_CHAR("SPELL_DIMENSIONAL_ANCHOR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DIMENSIONAL_LOCK, ACE_TEXT_ALWAYS_CHAR("SPELL_DIMENSIONAL_LOCK")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DIMINISH_PLANTS, ACE_TEXT_ALWAYS_CHAR("SPELL_DIMINISH_PLANTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISCERN_LIES, ACE_TEXT_ALWAYS_CHAR("SPELL_DISCERN_LIES")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISCERN_LOCATION, ACE_TEXT_ALWAYS_CHAR("SPELL_DISCERN_LOCATION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISGUISE_SELF, ACE_TEXT_ALWAYS_CHAR("SPELL_DISGUISE_SELF")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISINTEGRATE, ACE_TEXT_ALWAYS_CHAR("SPELL_DISINTEGRATE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISMISSAL, ACE_TEXT_ALWAYS_CHAR("SPELL_DISMISSAL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISPEL_CHAOS, ACE_TEXT_ALWAYS_CHAR("SPELL_DISPEL_CHAOS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISPEL_EVIL, ACE_TEXT_ALWAYS_CHAR("SPELL_DISPEL_EVIL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISPEL_GOOD, ACE_TEXT_ALWAYS_CHAR("SPELL_DISPEL_GOOD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISPEL_LAW, ACE_TEXT_ALWAYS_CHAR("SPELL_DISPEL_LAW")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISPEL_MAGIC, ACE_TEXT_ALWAYS_CHAR("SPELL_DISPEL_MAGIC")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISPEL_MAGIC_GREATER, ACE_TEXT_ALWAYS_CHAR("SPELL_DISPEL_MAGIC_GREATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISPLACEMENT, ACE_TEXT_ALWAYS_CHAR("SPELL_DISPLACEMENT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISRUPT_UNDEAD, ACE_TEXT_ALWAYS_CHAR("SPELL_DISRUPT_UNDEAD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DISRUPTING_WEAPON, ACE_TEXT_ALWAYS_CHAR("SPELL_DISRUPTING_WEAPON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DIVINATION, ACE_TEXT_ALWAYS_CHAR("SPELL_DIVINATION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DIVINE_FAVOR, ACE_TEXT_ALWAYS_CHAR("SPELL_DIVINE_FAVOR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DIVINE_POWER, ACE_TEXT_ALWAYS_CHAR("SPELL_DIVINE_POWER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DOMINATE_ANIMAL, ACE_TEXT_ALWAYS_CHAR("SPELL_DOMINATE_ANIMAL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DOMINATE_MONSTER, ACE_TEXT_ALWAYS_CHAR("SPELL_DOMINATE_MONSTER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DOMINATE_PERSON, ACE_TEXT_ALWAYS_CHAR("SPELL_DOMINATE_PERSON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DOOM, ACE_TEXT_ALWAYS_CHAR("SPELL_DOOM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_DREAM, ACE_TEXT_ALWAYS_CHAR("SPELL_DREAM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_EAGLES_SPLENDOR, ACE_TEXT_ALWAYS_CHAR("SPELL_EAGLES_SPLENDOR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_EAGLES_SPLENDOR_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_EAGLES_SPLENDOR_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ELEMENTAL_SWARM, ACE_TEXT_ALWAYS_CHAR("SPELL_ELEMENTAL_SWARM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ENDURE_ELEMENTS, ACE_TEXT_ALWAYS_CHAR("SPELL_ENDURE_ELEMENTS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ENERGY_DRAIN, ACE_TEXT_ALWAYS_CHAR("SPELL_ENERGY_DRAIN")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ENERVATION, ACE_TEXT_ALWAYS_CHAR("SPELL_ENERVATION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ENLARGE_PERSON, ACE_TEXT_ALWAYS_CHAR("SPELL_ENLARGE_PERSON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ENLARGE_PERSON_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_ENLARGE_PERSON_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ENTANGLE, ACE_TEXT_ALWAYS_CHAR("SPELL_ENTANGLE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ENTHRALL, ACE_TEXT_ALWAYS_CHAR("SPELL_ENTHRALL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ENTROPIC_SHIELD, ACE_TEXT_ALWAYS_CHAR("SPELL_ENTROPIC_SHIELD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ERASE, ACE_TEXT_ALWAYS_CHAR("SPELL_ERASE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ETHEREAL_JAUNT, ACE_TEXT_ALWAYS_CHAR("SPELL_ETHEREAL_JAUNT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_ETHEREALNESS, ACE_TEXT_ALWAYS_CHAR("SPELL_ETHEREALNESS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_EXPEDITIOUS_RETREAT, ACE_TEXT_ALWAYS_CHAR("SPELL_EXPEDITIOUS_RETREAT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_EXPLOSIVE_RUNES, ACE_TEXT_ALWAYS_CHAR("SPELL_EXPLOSIVE_RUNES")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_EYEBITE, ACE_TEXT_ALWAYS_CHAR("SPELL_EYEBITE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_FEAR, ACE_TEXT_ALWAYS_CHAR("SPELL_FEAR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_FEEBLEMIND, ACE_TEXT_ALWAYS_CHAR("SPELL_FEEBLEMIND")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_FIRE_STORM, ACE_TEXT_ALWAYS_CHAR("SPELL_FIRE_STORM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_GASEOUS_FORM, ACE_TEXT_ALWAYS_CHAR("SPELL_GASEOUS_FORM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_GOOD_HOPE, ACE_TEXT_ALWAYS_CHAR("SPELL_GOOD_HOPE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_HEAL, ACE_TEXT_ALWAYS_CHAR("SPELL_HEAL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_HEAL_MASS, ACE_TEXT_ALWAYS_CHAR("SPELL_HEAL_MASS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_HEAT_METAL, ACE_TEXT_ALWAYS_CHAR("SPELL_HEAT_METAL")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_HEROISM, ACE_TEXT_ALWAYS_CHAR("SPELL_HEROISM")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_HOLD_MONSTER, ACE_TEXT_ALWAYS_CHAR("SPELL_HOLD_MONSTER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_IMPLOSION, ACE_TEXT_ALWAYS_CHAR("SPELL_IMPLOSION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_INSANITY, ACE_TEXT_ALWAYS_CHAR("SPELL_INSANITY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_INVISIBILITY, ACE_TEXT_ALWAYS_CHAR("SPELL_INVISIBILITY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_MAGIC_WEAPON, ACE_TEXT_ALWAYS_CHAR("SPELL_MAGIC_WEAPON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_MIRACLE, ACE_TEXT_ALWAYS_CHAR("SPELL_MIRACLE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_MIRROR_IMAGE, ACE_TEXT_ALWAYS_CHAR("SPELL_MIRROR_IMAGE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_NEUTRALIZE_POISON, ACE_TEXT_ALWAYS_CHAR("SPELL_NEUTRALIZE_POISON")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_PLANE_SHIFT, ACE_TEXT_ALWAYS_CHAR("SPELL_PLANE_SHIFT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_PLANT_GROWTH, ACE_TEXT_ALWAYS_CHAR("SPELL_PLANT_GROWTH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_POLYMORPH, ACE_TEXT_ALWAYS_CHAR("SPELL_POLYMORPH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_POWER_WORD_STUN, ACE_TEXT_ALWAYS_CHAR("SPELL_POWER_WORD_STUN")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_PROJECT_IMAGE, ACE_TEXT_ALWAYS_CHAR("SPELL_PROJECT_IMAGE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_REMOVE_CURSE, ACE_TEXT_ALWAYS_CHAR("SPELL_REMOVE_CURSE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_REMOVE_DISEASE, ACE_TEXT_ALWAYS_CHAR("SPELL_REMOVE_DISEASE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_REMOVE_FEAR, ACE_TEXT_ALWAYS_CHAR("SPELL_REMOVE_FEAR")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_RESTORATION, ACE_TEXT_ALWAYS_CHAR("SPELL_RESTORATION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_RESTORATION_GREATER, ACE_TEXT_ALWAYS_CHAR("SPELL_RESTORATION_GREATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_REVERSE_GRAVITY, ACE_TEXT_ALWAYS_CHAR("SPELL_REVERSE_GRAVITY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SCARE, ACE_TEXT_ALWAYS_CHAR("SPELL_SCARE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SEE_INVISIBILITY, ACE_TEXT_ALWAYS_CHAR("SPELL_SEE_INVISIBILITY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SILENT_IMAGE, ACE_TEXT_ALWAYS_CHAR("SPELL_SILENT_IMAGE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SLOW, ACE_TEXT_ALWAYS_CHAR("SPELL_SLOW")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_STINKING_CLOUD, ACE_TEXT_ALWAYS_CHAR("SPELL_STINKING_CLOUD")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_STONE_SHAPE, ACE_TEXT_ALWAYS_CHAR("SPELL_STONE_SHAPE")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SUGGESTION, ACE_TEXT_ALWAYS_CHAR("SPELL_SUGGESTION")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SUMMON_MONSTER_I, ACE_TEXT_ALWAYS_CHAR("SPELL_SUMMON_MONSTER_I")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SUMMON_MONSTER_III, ACE_TEXT_ALWAYS_CHAR("SPELL_SUMMON_MONSTER_III")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SUMMON_MONSTER_IV, ACE_TEXT_ALWAYS_CHAR("SPELL_SUMMON_MONSTER_IV")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SUMMON_MONSTER_V, ACE_TEXT_ALWAYS_CHAR("SPELL_SUMMON_MONSTER_V")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SUMMON_MONSTER_IX, ACE_TEXT_ALWAYS_CHAR("SPELL_SUMMON_MONSTER_IX")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_SYMPATHY, ACE_TEXT_ALWAYS_CHAR("SPELL_SYMPATHY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_TELEKINESIS, ACE_TEXT_ALWAYS_CHAR("SPELL_TELEKINESIS")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_TELEPATHY, ACE_TEXT_ALWAYS_CHAR("SPELL_TELEPATHY")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_TELEPORT_GREATER, ACE_TEXT_ALWAYS_CHAR("SPELL_TELEPORT_GREATER")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_TONGUES, ACE_TEXT_ALWAYS_CHAR("SPELL_TONGUES")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_TRUE_SEEING, ACE_TEXT_ALWAYS_CHAR("SPELL_TRUE_SEEING")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_UNHOLY_AURA, ACE_TEXT_ALWAYS_CHAR("SPELL_UNHOLY_AURA")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_UNHOLY_BLIGHT, ACE_TEXT_ALWAYS_CHAR("SPELL_UNHOLY_BLIGHT")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_WISH, ACE_TEXT_ALWAYS_CHAR("SPELL_WISH")));
    myRPG_Magic_SpellTypeToStringTable.insert(std::make_pair(SPELL_WISH_LIMITED, ACE_TEXT_ALWAYS_CHAR("SPELL_WISH_LIMITED")));
  };

  inline static std::string RPG_Magic_SpellTypeToString(const RPG_Magic_SpellType& element_in)
  {
    std::string result;
    RPG_Magic_SpellTypeToStringTableIterator_t iterator = myRPG_Magic_SpellTypeToStringTable.find(element_in);
    if (iterator != myRPG_Magic_SpellTypeToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_MAGIC_SPELLTYPE_INVALID");

    return result;
  };

  inline static RPG_Magic_SpellType stringToRPG_Magic_SpellType(const std::string& string_in)
  {
    RPG_Magic_SpellTypeToStringTableIterator_t iterator = myRPG_Magic_SpellTypeToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Magic_SpellTypeToStringTable.end());

    return RPG_MAGIC_SPELLTYPE_INVALID;
  };

  static RPG_Magic_SpellTypeToStringTable_t myRPG_Magic_SpellTypeToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Magic_SpellTypeHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Magic_SpellTypeHelper(const RPG_Magic_SpellTypeHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Magic_SpellTypeHelper& operator=(const RPG_Magic_SpellTypeHelper&));
};

#endif
