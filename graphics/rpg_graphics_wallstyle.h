
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_GRAPHICS_WALLSTYLE_H
#define RPG_GRAPHICS_WALLSTYLE_H

enum RPG_Graphics_WallStyle
{
  WALLSTYLE_BRICK = 0,
  WALLSTYLE_BRICK_BANNER,
  WALLSTYLE_BRICK_PAINTING,
  WALLSTYLE_BRICK_PILLAR,
  WALLSTYLE_BRICK_POCKET,
  WALLSTYLE_DARK,
  WALLSTYLE_LIGHT,
  WALLSTYLE_MARBLE,
  WALLSTYLE_ROUGH,
  WALLSTYLE_STUCCO,
  WALLSTYLE_VINE_COVERED,
  //
  RPG_GRAPHICS_WALLSTYLE_MAX,
  RPG_GRAPHICS_WALLSTYLE_INVALID
};

#include "rpg_graphics_exports.h"

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Graphics_WallStyle, std::string> RPG_Graphics_WallStyleToStringTable_t;
typedef RPG_Graphics_WallStyleToStringTable_t::const_iterator RPG_Graphics_WallStyleToStringTableIterator_t;

class RPG_Graphics_Export RPG_Graphics_WallStyleHelper
{
 public:
  inline static void init()
  {
    myRPG_Graphics_WallStyleToStringTable.clear();
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_BRICK, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_BRICK")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_BRICK_BANNER, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_BRICK_BANNER")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_BRICK_PAINTING, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_BRICK_PAINTING")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_BRICK_PILLAR, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_BRICK_PILLAR")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_BRICK_POCKET, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_BRICK_POCKET")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_DARK, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_DARK")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_LIGHT, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_LIGHT")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_MARBLE, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_MARBLE")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_ROUGH, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_ROUGH")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_STUCCO, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_STUCCO")));
    myRPG_Graphics_WallStyleToStringTable.insert(std::make_pair(WALLSTYLE_VINE_COVERED, ACE_TEXT_ALWAYS_CHAR("WALLSTYLE_VINE_COVERED")));
  };

  inline static std::string RPG_Graphics_WallStyleToString(const RPG_Graphics_WallStyle& element_in)
  {
    std::string result;
    RPG_Graphics_WallStyleToStringTableIterator_t iterator = myRPG_Graphics_WallStyleToStringTable.find(element_in);
    if (iterator != myRPG_Graphics_WallStyleToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_GRAPHICS_WALLSTYLE_INVALID");

    return result;
  };

  inline static RPG_Graphics_WallStyle stringToRPG_Graphics_WallStyle(const std::string& string_in)
  {
    RPG_Graphics_WallStyleToStringTableIterator_t iterator = myRPG_Graphics_WallStyleToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Graphics_WallStyleToStringTable.end());

    return RPG_GRAPHICS_WALLSTYLE_INVALID;
  };

  static RPG_Graphics_WallStyleToStringTable_t myRPG_Graphics_WallStyleToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Graphics_WallStyleHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Graphics_WallStyleHelper(const RPG_Graphics_WallStyleHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Graphics_WallStyleHelper& operator=(const RPG_Graphics_WallStyleHelper&));
};

#endif
