
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_GRAPHICS_FLOORSTYLE_H
#define RPG_GRAPHICS_FLOORSTYLE_H

enum RPG_Graphics_FloorStyle
{
  FLOORSTYLE_AIR = 0,
  FLOORSTYLE_CARPET,
  FLOORSTYLE_CERAMIC,
  FLOORSTYLE_DARK,
  FLOORSTYLE_ICE,
  FLOORSTYLE_LAVA,
  FLOORSTYLE_MARBLE,
  FLOORSTYLE_MURAL,
  FLOORSTYLE_MURAL2,
  FLOORSTYLE_ROUGH,
  FLOORSTYLE_ROUGH_LIT,
  FLOORSTYLE_STONE_COBBLED,
  FLOORSTYLE_STONE_MOSS_COVERED,
  FLOORSTYLE_WATER,
  //
  RPG_GRAPHICS_FLOORSTYLE_MAX,
  RPG_GRAPHICS_FLOORSTYLE_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Graphics_FloorStyle, std::string> RPG_Graphics_FloorStyleToStringTable_t;
typedef RPG_Graphics_FloorStyleToStringTable_t::const_iterator RPG_Graphics_FloorStyleToStringTableIterator_t;

class RPG_Graphics_FloorStyleHelper
{
 public:
  inline static void init()
  {
    myRPG_Graphics_FloorStyleToStringTable.clear();
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_AIR, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_AIR")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_CARPET, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_CARPET")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_CERAMIC, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_CERAMIC")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_DARK, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_DARK")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_ICE, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_ICE")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_LAVA, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_LAVA")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_MARBLE, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_MARBLE")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_MURAL, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_MURAL")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_MURAL2, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_MURAL2")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_ROUGH, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_ROUGH")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_ROUGH_LIT, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_ROUGH_LIT")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_STONE_COBBLED, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_STONE_COBBLED")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_STONE_MOSS_COVERED, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_STONE_MOSS_COVERED")));
    myRPG_Graphics_FloorStyleToStringTable.insert(std::make_pair(FLOORSTYLE_WATER, ACE_TEXT_ALWAYS_CHAR("FLOORSTYLE_WATER")));
  };

  inline static std::string RPG_Graphics_FloorStyleToString(const RPG_Graphics_FloorStyle& element_in)
  {
    std::string result;
    RPG_Graphics_FloorStyleToStringTableIterator_t iterator = myRPG_Graphics_FloorStyleToStringTable.find(element_in);
    if (iterator != myRPG_Graphics_FloorStyleToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_GRAPHICS_FLOORSTYLE_INVALID");

    return result;
  };

  inline static RPG_Graphics_FloorStyle stringToRPG_Graphics_FloorStyle(const std::string& string_in)
  {
    RPG_Graphics_FloorStyleToStringTableIterator_t iterator = myRPG_Graphics_FloorStyleToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Graphics_FloorStyleToStringTable.end());

    return RPG_GRAPHICS_FLOORSTYLE_INVALID;
  };

  static RPG_Graphics_FloorStyleToStringTable_t myRPG_Graphics_FloorStyleToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Graphics_FloorStyleHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Graphics_FloorStyleHelper(const RPG_Graphics_FloorStyleHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Graphics_FloorStyleHelper& operator=(const RPG_Graphics_FloorStyleHelper&));
};

#endif
