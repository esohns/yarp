
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_ITEM_COMMODITYLIGHT_H
#define RPG_ITEM_COMMODITYLIGHT_H

enum RPG_Item_CommodityLight
{
  COMMODITY_LIGHT_CANDLE = 0,
  COMMODITY_LIGHT_LAMP,
  COMMODITY_LIGHT_LANTERN_BULLSEYE,
  COMMODITY_LIGHT_LANTERN_HOODED,
  COMMODITY_LIGHT_TORCH,
  //
  RPG_ITEM_COMMODITYLIGHT_MAX,
  RPG_ITEM_COMMODITYLIGHT_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Item_CommodityLight, std::string> RPG_Item_CommodityLightToStringTable_t;
typedef RPG_Item_CommodityLightToStringTable_t::const_iterator RPG_Item_CommodityLightToStringTableIterator_t;

class RPG_Item_CommodityLightHelper
{
 public:
  inline static void init()
  {
    myRPG_Item_CommodityLightToStringTable.clear();
    myRPG_Item_CommodityLightToStringTable.insert(std::make_pair(COMMODITY_LIGHT_CANDLE, ACE_TEXT_ALWAYS_CHAR("COMMODITY_LIGHT_CANDLE")));
    myRPG_Item_CommodityLightToStringTable.insert(std::make_pair(COMMODITY_LIGHT_LAMP, ACE_TEXT_ALWAYS_CHAR("COMMODITY_LIGHT_LAMP")));
    myRPG_Item_CommodityLightToStringTable.insert(std::make_pair(COMMODITY_LIGHT_LANTERN_BULLSEYE, ACE_TEXT_ALWAYS_CHAR("COMMODITY_LIGHT_LANTERN_BULLSEYE")));
    myRPG_Item_CommodityLightToStringTable.insert(std::make_pair(COMMODITY_LIGHT_LANTERN_HOODED, ACE_TEXT_ALWAYS_CHAR("COMMODITY_LIGHT_LANTERN_HOODED")));
    myRPG_Item_CommodityLightToStringTable.insert(std::make_pair(COMMODITY_LIGHT_TORCH, ACE_TEXT_ALWAYS_CHAR("COMMODITY_LIGHT_TORCH")));
  };

  inline static std::string RPG_Item_CommodityLightToString(const RPG_Item_CommodityLight& element_in)
  {
    std::string result;
    RPG_Item_CommodityLightToStringTableIterator_t iterator = myRPG_Item_CommodityLightToStringTable.find(element_in);
    if (iterator != myRPG_Item_CommodityLightToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_ITEM_COMMODITYLIGHT_INVALID");

    return result;
  };

  inline static RPG_Item_CommodityLight stringToRPG_Item_CommodityLight(const std::string& string_in)
  {
    RPG_Item_CommodityLightToStringTableIterator_t iterator = myRPG_Item_CommodityLightToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Item_CommodityLightToStringTable.end());

    return RPG_ITEM_COMMODITYLIGHT_INVALID;
  };

  static RPG_Item_CommodityLightToStringTable_t myRPG_Item_CommodityLightToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Item_CommodityLightHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Item_CommodityLightHelper(const RPG_Item_CommodityLightHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Item_CommodityLightHelper& operator=(const RPG_Item_CommodityLightHelper&));
};

#endif
