
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_ITEM_MONEY_H
#define RPG_ITEM_MONEY_H

enum RPG_Item_Money
{
  MONEY_COIN_COPPER = 0,
  MONEY_COIN_SILVER,
  MONEY_COIN_GOLD,
  MONEY_COIN_PLATINUM,
  MONEY_GEM,
  MONEY_PRECIOUS,
  //
  RPG_ITEM_MONEY_MAX,
  RPG_ITEM_MONEY_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Item_Money, std::string> RPG_Item_MoneyToStringTable_t;
typedef RPG_Item_MoneyToStringTable_t::const_iterator RPG_Item_MoneyToStringTableIterator_t;

class RPG_Item_MoneyHelper
{
 public:
  inline static void init()
  {
    myRPG_Item_MoneyToStringTable.clear();
    myRPG_Item_MoneyToStringTable.insert(std::make_pair(MONEY_COIN_COPPER, ACE_TEXT_ALWAYS_CHAR("MONEY_COIN_COPPER")));
    myRPG_Item_MoneyToStringTable.insert(std::make_pair(MONEY_COIN_SILVER, ACE_TEXT_ALWAYS_CHAR("MONEY_COIN_SILVER")));
    myRPG_Item_MoneyToStringTable.insert(std::make_pair(MONEY_COIN_GOLD, ACE_TEXT_ALWAYS_CHAR("MONEY_COIN_GOLD")));
    myRPG_Item_MoneyToStringTable.insert(std::make_pair(MONEY_COIN_PLATINUM, ACE_TEXT_ALWAYS_CHAR("MONEY_COIN_PLATINUM")));
    myRPG_Item_MoneyToStringTable.insert(std::make_pair(MONEY_GEM, ACE_TEXT_ALWAYS_CHAR("MONEY_GEM")));
    myRPG_Item_MoneyToStringTable.insert(std::make_pair(MONEY_PRECIOUS, ACE_TEXT_ALWAYS_CHAR("MONEY_PRECIOUS")));
  };

  inline static std::string RPG_Item_MoneyToString(const RPG_Item_Money& element_in)
  {
    std::string result;
    RPG_Item_MoneyToStringTableIterator_t iterator = myRPG_Item_MoneyToStringTable.find(element_in);
    if (iterator != myRPG_Item_MoneyToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_ITEM_MONEY_INVALID");

    return result;
  };

  inline static RPG_Item_Money stringToRPG_Item_Money(const std::string& string_in)
  {
    RPG_Item_MoneyToStringTableIterator_t iterator = myRPG_Item_MoneyToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Item_MoneyToStringTable.end());

    return RPG_ITEM_MONEY_INVALID;
  };

  static RPG_Item_MoneyToStringTable_t myRPG_Item_MoneyToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Item_MoneyHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Item_MoneyHelper(const RPG_Item_MoneyHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Item_MoneyHelper& operator=(const RPG_Item_MoneyHelper&));
};

#endif
