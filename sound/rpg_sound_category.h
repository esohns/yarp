
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_SOUND_CATEGORY_H
#define RPG_SOUND_CATEGORY_H

enum RPG_Sound_Category
{
  CATEGORY_EFFECT_ONESHOT = 0,
  CATEGORY_EFFECT_INTERVAL,
  CATEGORY_MUSIC_ONESHOT,
  CATEGORY_MUSIC_AMBIENT,
  CATEGORY_MUSIC_CDTRACK,
  //
  RPG_SOUND_CATEGORY_MAX,
  RPG_SOUND_CATEGORY_INVALID
};

#include "rpg_sound_exports.h"

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Sound_Category, std::string> RPG_Sound_CategoryToStringTable_t;
typedef RPG_Sound_CategoryToStringTable_t::const_iterator RPG_Sound_CategoryToStringTableIterator_t;

class RPG_Sound_Export RPG_Sound_CategoryHelper
{
 public:
  inline static void init()
  {
    myRPG_Sound_CategoryToStringTable.clear();
    myRPG_Sound_CategoryToStringTable.insert(std::make_pair(CATEGORY_EFFECT_ONESHOT, ACE_TEXT_ALWAYS_CHAR("CATEGORY_EFFECT_ONESHOT")));
    myRPG_Sound_CategoryToStringTable.insert(std::make_pair(CATEGORY_EFFECT_INTERVAL, ACE_TEXT_ALWAYS_CHAR("CATEGORY_EFFECT_INTERVAL")));
    myRPG_Sound_CategoryToStringTable.insert(std::make_pair(CATEGORY_MUSIC_ONESHOT, ACE_TEXT_ALWAYS_CHAR("CATEGORY_MUSIC_ONESHOT")));
    myRPG_Sound_CategoryToStringTable.insert(std::make_pair(CATEGORY_MUSIC_AMBIENT, ACE_TEXT_ALWAYS_CHAR("CATEGORY_MUSIC_AMBIENT")));
    myRPG_Sound_CategoryToStringTable.insert(std::make_pair(CATEGORY_MUSIC_CDTRACK, ACE_TEXT_ALWAYS_CHAR("CATEGORY_MUSIC_CDTRACK")));
  };

  inline static std::string RPG_Sound_CategoryToString(const RPG_Sound_Category& element_in)
  {
    std::string result;
    RPG_Sound_CategoryToStringTableIterator_t iterator = myRPG_Sound_CategoryToStringTable.find(element_in);
    if (iterator != myRPG_Sound_CategoryToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_SOUND_CATEGORY_INVALID");

    return result;
  };

  inline static RPG_Sound_Category stringToRPG_Sound_Category(const std::string& string_in)
  {
    RPG_Sound_CategoryToStringTableIterator_t iterator = myRPG_Sound_CategoryToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Sound_CategoryToStringTable.end());

    return RPG_SOUND_CATEGORY_INVALID;
  };

  static RPG_Sound_CategoryToStringTable_t myRPG_Sound_CategoryToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Sound_CategoryHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Sound_CategoryHelper(const RPG_Sound_CategoryHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Sound_CategoryHelper& operator=(const RPG_Sound_CategoryHelper&));
};

#endif
