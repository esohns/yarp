
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_COMMON_CLIMATE_H
#define RPG_COMMON_CLIMATE_H

enum RPG_Common_Climate
{
  CLIMATE_COLD = 0,
  CLIMATE_TEMPERATE,
  CLIMATE_WARM,
  CLIMATE_ANY,
  //
  RPG_COMMON_CLIMATE_MAX,
  RPG_COMMON_CLIMATE_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Common_Climate, std::string> RPG_Common_ClimateToStringTable_t;
typedef RPG_Common_ClimateToStringTable_t::const_iterator RPG_Common_ClimateToStringTableIterator_t;

class RPG_Common_ClimateHelper
{
 public:
  inline static void init()
  {
    myRPG_Common_ClimateToStringTable.clear();
    myRPG_Common_ClimateToStringTable.insert(std::make_pair(CLIMATE_COLD, ACE_TEXT_ALWAYS_CHAR("CLIMATE_COLD")));
    myRPG_Common_ClimateToStringTable.insert(std::make_pair(CLIMATE_TEMPERATE, ACE_TEXT_ALWAYS_CHAR("CLIMATE_TEMPERATE")));
    myRPG_Common_ClimateToStringTable.insert(std::make_pair(CLIMATE_WARM, ACE_TEXT_ALWAYS_CHAR("CLIMATE_WARM")));
    myRPG_Common_ClimateToStringTable.insert(std::make_pair(CLIMATE_ANY, ACE_TEXT_ALWAYS_CHAR("CLIMATE_ANY")));
  };

  inline static std::string RPG_Common_ClimateToString(const RPG_Common_Climate& element_in)
  {
    std::string result;
    RPG_Common_ClimateToStringTableIterator_t iterator = myRPG_Common_ClimateToStringTable.find(element_in);
    if (iterator != myRPG_Common_ClimateToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_COMMON_CLIMATE_INVALID");

    return result;
  };

  inline static RPG_Common_Climate stringToRPG_Common_Climate(const std::string& string_in)
  {
    RPG_Common_ClimateToStringTableIterator_t iterator = myRPG_Common_ClimateToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Common_ClimateToStringTable.end());

    return RPG_COMMON_CLIMATE_INVALID;
  };

  static RPG_Common_ClimateToStringTable_t myRPG_Common_ClimateToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_ClimateHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_ClimateHelper(const RPG_Common_ClimateHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_ClimateHelper& operator=(const RPG_Common_ClimateHelper&));
};

#endif
