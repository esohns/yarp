
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_COMMON_CHECKTYPE_H
#define RPG_COMMON_CHECKTYPE_H

enum RPG_Common_CheckType
{
  CHECK_CASTER_LEVEL = 0,
  CHECK_GRAPPLE,
  CHECK_HIT_DICE,
  //
  RPG_COMMON_CHECKTYPE_MAX,
  RPG_COMMON_CHECKTYPE_INVALID
};

#include "rpg_common_exports.h"

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Common_CheckType, std::string> RPG_Common_CheckTypeToStringTable_t;
typedef RPG_Common_CheckTypeToStringTable_t::const_iterator RPG_Common_CheckTypeToStringTableIterator_t;

class RPG_Common_Export RPG_Common_CheckTypeHelper
{
 public:
  inline static void init()
  {
    myRPG_Common_CheckTypeToStringTable.clear();
    myRPG_Common_CheckTypeToStringTable.insert(std::make_pair(CHECK_CASTER_LEVEL, ACE_TEXT_ALWAYS_CHAR("CHECK_CASTER_LEVEL")));
    myRPG_Common_CheckTypeToStringTable.insert(std::make_pair(CHECK_GRAPPLE, ACE_TEXT_ALWAYS_CHAR("CHECK_GRAPPLE")));
    myRPG_Common_CheckTypeToStringTable.insert(std::make_pair(CHECK_HIT_DICE, ACE_TEXT_ALWAYS_CHAR("CHECK_HIT_DICE")));
  };

  inline static std::string RPG_Common_CheckTypeToString(const RPG_Common_CheckType& element_in)
  {
    std::string result;
    RPG_Common_CheckTypeToStringTableIterator_t iterator = myRPG_Common_CheckTypeToStringTable.find(element_in);
    if (iterator != myRPG_Common_CheckTypeToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_COMMON_CHECKTYPE_INVALID");

    return result;
  };

  inline static RPG_Common_CheckType stringToRPG_Common_CheckType(const std::string& string_in)
  {
    RPG_Common_CheckTypeToStringTableIterator_t iterator = myRPG_Common_CheckTypeToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Common_CheckTypeToStringTable.end());

    return RPG_COMMON_CHECKTYPE_INVALID;
  };

  static RPG_Common_CheckTypeToStringTable_t myRPG_Common_CheckTypeToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_CheckTypeHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_CheckTypeHelper(const RPG_Common_CheckTypeHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_CheckTypeHelper& operator=(const RPG_Common_CheckTypeHelper&));
};

#endif
