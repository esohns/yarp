
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_COMMON_TRACK_H
#define RPG_COMMON_TRACK_H

enum RPG_Common_Track
{
  TRACK_NONE = 0,
  TRACK_HIGHWAY,
  TRACK_ROAD,
  TRACK_TRAIL,
  TRACK_ANY,
  //
  RPG_COMMON_TRACK_MAX,
  RPG_COMMON_TRACK_INVALID
};

#include "rpg_common_exports.h"

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Common_Track, std::string> RPG_Common_TrackToStringTable_t;
typedef RPG_Common_TrackToStringTable_t::const_iterator RPG_Common_TrackToStringTableIterator_t;

class RPG_Common_Export RPG_Common_TrackHelper
{
 public:
  inline static void init()
  {
    myRPG_Common_TrackToStringTable.clear();
    myRPG_Common_TrackToStringTable.insert(std::make_pair(TRACK_NONE, ACE_TEXT_ALWAYS_CHAR("TRACK_NONE")));
    myRPG_Common_TrackToStringTable.insert(std::make_pair(TRACK_HIGHWAY, ACE_TEXT_ALWAYS_CHAR("TRACK_HIGHWAY")));
    myRPG_Common_TrackToStringTable.insert(std::make_pair(TRACK_ROAD, ACE_TEXT_ALWAYS_CHAR("TRACK_ROAD")));
    myRPG_Common_TrackToStringTable.insert(std::make_pair(TRACK_TRAIL, ACE_TEXT_ALWAYS_CHAR("TRACK_TRAIL")));
    myRPG_Common_TrackToStringTable.insert(std::make_pair(TRACK_ANY, ACE_TEXT_ALWAYS_CHAR("TRACK_ANY")));
  };

  inline static std::string RPG_Common_TrackToString(const RPG_Common_Track& element_in)
  {
    std::string result;
    RPG_Common_TrackToStringTableIterator_t iterator = myRPG_Common_TrackToStringTable.find(element_in);
    if (iterator != myRPG_Common_TrackToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_COMMON_TRACK_INVALID");

    return result;
  };

  inline static RPG_Common_Track stringToRPG_Common_Track(const std::string& string_in)
  {
    RPG_Common_TrackToStringTableIterator_t iterator = myRPG_Common_TrackToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Common_TrackToStringTable.end());

    return RPG_COMMON_TRACK_INVALID;
  };

  static RPG_Common_TrackToStringTable_t myRPG_Common_TrackToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_TrackHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_TrackHelper(const RPG_Common_TrackHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_TrackHelper& operator=(const RPG_Common_TrackHelper&));
};

#endif
