
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_COMMON_PHYSICALDAMAGETYPE_H
#define RPG_COMMON_PHYSICALDAMAGETYPE_H

enum RPG_Common_PhysicalDamageType
{
  PHYSICALDAMAGE_NONE = 0,
  PHYSICALDAMAGE_NON_LETHAL,
  PHYSICALDAMAGE_BLUDGEONING,
  PHYSICALDAMAGE_PIERCING,
  PHYSICALDAMAGE_SLASHING,
  PHYSICALDAMAGE_CRUSHING,
  PHYSICALDAMAGE_WITHERING,
  //
  RPG_COMMON_PHYSICALDAMAGETYPE_MAX,
  RPG_COMMON_PHYSICALDAMAGETYPE_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Common_PhysicalDamageType, std::string> RPG_Common_PhysicalDamageTypeToStringTable_t;
typedef RPG_Common_PhysicalDamageTypeToStringTable_t::const_iterator RPG_Common_PhysicalDamageTypeToStringTableIterator_t;

class RPG_Common_PhysicalDamageTypeHelper
{
 public:
  inline static void init()
  {
    myRPG_Common_PhysicalDamageTypeToStringTable.clear();
    myRPG_Common_PhysicalDamageTypeToStringTable.insert(std::make_pair(PHYSICALDAMAGE_NONE, ACE_TEXT_ALWAYS_CHAR("PHYSICALDAMAGE_NONE")));
    myRPG_Common_PhysicalDamageTypeToStringTable.insert(std::make_pair(PHYSICALDAMAGE_NON_LETHAL, ACE_TEXT_ALWAYS_CHAR("PHYSICALDAMAGE_NON_LETHAL")));
    myRPG_Common_PhysicalDamageTypeToStringTable.insert(std::make_pair(PHYSICALDAMAGE_BLUDGEONING, ACE_TEXT_ALWAYS_CHAR("PHYSICALDAMAGE_BLUDGEONING")));
    myRPG_Common_PhysicalDamageTypeToStringTable.insert(std::make_pair(PHYSICALDAMAGE_PIERCING, ACE_TEXT_ALWAYS_CHAR("PHYSICALDAMAGE_PIERCING")));
    myRPG_Common_PhysicalDamageTypeToStringTable.insert(std::make_pair(PHYSICALDAMAGE_SLASHING, ACE_TEXT_ALWAYS_CHAR("PHYSICALDAMAGE_SLASHING")));
    myRPG_Common_PhysicalDamageTypeToStringTable.insert(std::make_pair(PHYSICALDAMAGE_CRUSHING, ACE_TEXT_ALWAYS_CHAR("PHYSICALDAMAGE_CRUSHING")));
    myRPG_Common_PhysicalDamageTypeToStringTable.insert(std::make_pair(PHYSICALDAMAGE_WITHERING, ACE_TEXT_ALWAYS_CHAR("PHYSICALDAMAGE_WITHERING")));
  };

  inline static std::string RPG_Common_PhysicalDamageTypeToString(const RPG_Common_PhysicalDamageType& element_in)
  {
    std::string result;
    RPG_Common_PhysicalDamageTypeToStringTableIterator_t iterator = myRPG_Common_PhysicalDamageTypeToStringTable.find(element_in);
    if (iterator != myRPG_Common_PhysicalDamageTypeToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_COMMON_PHYSICALDAMAGETYPE_INVALID");

    return result;
  };

  inline static RPG_Common_PhysicalDamageType stringToRPG_Common_PhysicalDamageType(const std::string& string_in)
  {
    RPG_Common_PhysicalDamageTypeToStringTableIterator_t iterator = myRPG_Common_PhysicalDamageTypeToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Common_PhysicalDamageTypeToStringTable.end());

    return RPG_COMMON_PHYSICALDAMAGETYPE_INVALID;
  };

  static RPG_Common_PhysicalDamageTypeToStringTable_t myRPG_Common_PhysicalDamageTypeToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_PhysicalDamageTypeHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_PhysicalDamageTypeHelper(const RPG_Common_PhysicalDamageTypeHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Common_PhysicalDamageTypeHelper& operator=(const RPG_Common_PhysicalDamageTypeHelper&));
};

#endif
