
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_CHARACTER_ALIGNMENTETHIC_H
#define RPG_CHARACTER_ALIGNMENTETHIC_H

enum RPG_Character_AlignmentEthic
{
  ALIGNMENTETHIC_EVIL = 0,
  ALIGNMENTETHIC_GOOD,
  ALIGNMENTETHIC_NEUTRAL,
  ALIGNMENTETHIC_ANY,
  //
  RPG_CHARACTER_ALIGNMENTETHIC_MAX,
  RPG_CHARACTER_ALIGNMENTETHIC_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Character_AlignmentEthic, std::string> RPG_Character_AlignmentEthicToStringTable_t;
typedef RPG_Character_AlignmentEthicToStringTable_t::const_iterator RPG_Character_AlignmentEthicToStringTableIterator_t;

class RPG_Character_AlignmentEthicHelper
{
 public:
  inline static void init()
  {
    myRPG_Character_AlignmentEthicToStringTable.clear();
    myRPG_Character_AlignmentEthicToStringTable.insert(std::make_pair(ALIGNMENTETHIC_EVIL, ACE_TEXT_ALWAYS_CHAR("ALIGNMENTETHIC_EVIL")));
    myRPG_Character_AlignmentEthicToStringTable.insert(std::make_pair(ALIGNMENTETHIC_GOOD, ACE_TEXT_ALWAYS_CHAR("ALIGNMENTETHIC_GOOD")));
    myRPG_Character_AlignmentEthicToStringTable.insert(std::make_pair(ALIGNMENTETHIC_NEUTRAL, ACE_TEXT_ALWAYS_CHAR("ALIGNMENTETHIC_NEUTRAL")));
    myRPG_Character_AlignmentEthicToStringTable.insert(std::make_pair(ALIGNMENTETHIC_ANY, ACE_TEXT_ALWAYS_CHAR("ALIGNMENTETHIC_ANY")));
  };

  inline static std::string RPG_Character_AlignmentEthicToString(const RPG_Character_AlignmentEthic& element_in)
  {
    std::string result;
    RPG_Character_AlignmentEthicToStringTableIterator_t iterator = myRPG_Character_AlignmentEthicToStringTable.find(element_in);
    if (iterator != myRPG_Character_AlignmentEthicToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_CHARACTER_ALIGNMENTETHIC_INVALID");

    return result;
  };

  inline static RPG_Character_AlignmentEthic stringToRPG_Character_AlignmentEthic(const std::string& string_in)
  {
    RPG_Character_AlignmentEthicToStringTableIterator_t iterator = myRPG_Character_AlignmentEthicToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Character_AlignmentEthicToStringTable.end());

    return RPG_CHARACTER_ALIGNMENTETHIC_INVALID;
  };

  static RPG_Character_AlignmentEthicToStringTable_t myRPG_Character_AlignmentEthicToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Character_AlignmentEthicHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Character_AlignmentEthicHelper(const RPG_Character_AlignmentEthicHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Character_AlignmentEthicHelper& operator=(const RPG_Character_AlignmentEthicHelper&));
};

#endif
