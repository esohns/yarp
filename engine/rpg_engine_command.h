
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_ENGINE_COMMAND_H
#define RPG_ENGINE_COMMAND_H

enum RPG_Engine_Command
{
  COMMAND_ATTACK = 0,
  COMMAND_ATTACK_FULL,
  COMMAND_ATTACK_STANDARD,
  COMMAND_DOOR_CLOSE,
  COMMAND_DOOR_OPEN,
  COMMAND_IDLE,
  COMMAND_RUN,
  COMMAND_SEARCH,
  COMMAND_STEP,
  COMMAND_STOP,
  COMMAND_TRAVEL,
  COMMAND_E2C_ENTITY_ADD,
  COMMAND_E2C_ENTITY_REMOVE,
  COMMAND_E2C_ENTITY_HIT,
  COMMAND_E2C_ENTITY_MISS,
  COMMAND_E2C_ENTITY_CONDITION,
  COMMAND_E2C_ENTITY_POSITION,
  COMMAND_E2C_ENTITY_VISION,
  COMMAND_E2C_ENTITY_LEVEL_UP,
  COMMAND_E2C_ENTITY_STATE,
  COMMAND_E2C_INIT,
  COMMAND_E2C_MESSAGE,
  COMMAND_E2C_QUIT,
  //
  RPG_ENGINE_COMMAND_MAX,
  RPG_ENGINE_COMMAND_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Engine_Command, std::string> RPG_Engine_CommandToStringTable_t;
typedef RPG_Engine_CommandToStringTable_t::const_iterator RPG_Engine_CommandToStringTableIterator_t;

class RPG_Engine_CommandHelper
{
 public:
  inline static void init()
  {
    myRPG_Engine_CommandToStringTable.clear();
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_ATTACK, ACE_TEXT_ALWAYS_CHAR("COMMAND_ATTACK")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_ATTACK_FULL, ACE_TEXT_ALWAYS_CHAR("COMMAND_ATTACK_FULL")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_ATTACK_STANDARD, ACE_TEXT_ALWAYS_CHAR("COMMAND_ATTACK_STANDARD")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_DOOR_CLOSE, ACE_TEXT_ALWAYS_CHAR("COMMAND_DOOR_CLOSE")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_DOOR_OPEN, ACE_TEXT_ALWAYS_CHAR("COMMAND_DOOR_OPEN")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_IDLE, ACE_TEXT_ALWAYS_CHAR("COMMAND_IDLE")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_RUN, ACE_TEXT_ALWAYS_CHAR("COMMAND_RUN")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_SEARCH, ACE_TEXT_ALWAYS_CHAR("COMMAND_SEARCH")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_STEP, ACE_TEXT_ALWAYS_CHAR("COMMAND_STEP")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_STOP, ACE_TEXT_ALWAYS_CHAR("COMMAND_STOP")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_TRAVEL, ACE_TEXT_ALWAYS_CHAR("COMMAND_TRAVEL")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_ADD, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_ADD")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_REMOVE, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_REMOVE")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_HIT, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_HIT")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_MISS, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_MISS")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_CONDITION, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_CONDITION")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_POSITION, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_POSITION")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_VISION, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_VISION")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_LEVEL_UP, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_LEVEL_UP")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_ENTITY_STATE, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_ENTITY_STATE")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_INIT, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_INIT")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_MESSAGE, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_MESSAGE")));
    myRPG_Engine_CommandToStringTable.insert(std::make_pair(COMMAND_E2C_QUIT, ACE_TEXT_ALWAYS_CHAR("COMMAND_E2C_QUIT")));
  };

  inline static std::string RPG_Engine_CommandToString(const RPG_Engine_Command& element_in)
  {
    std::string result;
    RPG_Engine_CommandToStringTableIterator_t iterator = myRPG_Engine_CommandToStringTable.find(element_in);
    if (iterator != myRPG_Engine_CommandToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_ENGINE_COMMAND_INVALID");

    return result;
  };

  inline static RPG_Engine_Command stringToRPG_Engine_Command(const std::string& string_in)
  {
    RPG_Engine_CommandToStringTableIterator_t iterator = myRPG_Engine_CommandToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Engine_CommandToStringTable.end());

    return RPG_ENGINE_COMMAND_INVALID;
  };

  static RPG_Engine_CommandToStringTable_t myRPG_Engine_CommandToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Engine_CommandHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Engine_CommandHelper(const RPG_Engine_CommandHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Engine_CommandHelper& operator=(const RPG_Engine_CommandHelper&));
};

#endif
