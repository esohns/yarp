
// -------------------------------- * * * ----------------------------------- //
// PLEASE NOTE: this file was/is generated by XML2CppCode 0.0.1-devel
// -------------------------------- * * * ----------------------------------- //

#ifndef RPG_CLIENT_GRAPHICSMODE_H
#define RPG_CLIENT_GRAPHICSMODE_H

enum RPG_Client_GraphicsMode
{
  GRAPHICSMODE_2D_ISOMETRIC = 0,
  GRAPHICSMODE_2D_OPENGL,
  GRAPHICSMODE_3D,
  //
  RPG_CLIENT_GRAPHICSMODE_MAX,
  RPG_CLIENT_GRAPHICSMODE_INVALID
};

#include "ace/Global_Macros.h"

#include <map>
#include <string>

typedef std::map<RPG_Client_GraphicsMode, std::string> RPG_Client_GraphicsModeToStringTable_t;
typedef RPG_Client_GraphicsModeToStringTable_t::const_iterator RPG_Client_GraphicsModeToStringTableIterator_t;

class RPG_Client_GraphicsModeHelper
{
 public:
  inline static void init()
  {
    myRPG_Client_GraphicsModeToStringTable.clear();
    myRPG_Client_GraphicsModeToStringTable.insert(std::make_pair(GRAPHICSMODE_2D_ISOMETRIC, ACE_TEXT_ALWAYS_CHAR("GRAPHICSMODE_2D_ISOMETRIC")));
    myRPG_Client_GraphicsModeToStringTable.insert(std::make_pair(GRAPHICSMODE_2D_OPENGL, ACE_TEXT_ALWAYS_CHAR("GRAPHICSMODE_2D_OPENGL")));
    myRPG_Client_GraphicsModeToStringTable.insert(std::make_pair(GRAPHICSMODE_3D, ACE_TEXT_ALWAYS_CHAR("GRAPHICSMODE_3D")));
  };

  inline static std::string RPG_Client_GraphicsModeToString(const RPG_Client_GraphicsMode& element_in)
  {
    std::string result;
    RPG_Client_GraphicsModeToStringTableIterator_t iterator = myRPG_Client_GraphicsModeToStringTable.find(element_in);
    if (iterator != myRPG_Client_GraphicsModeToStringTable.end())
      result = iterator->second;
    else
      result = ACE_TEXT_ALWAYS_CHAR("RPG_CLIENT_GRAPHICSMODE_INVALID");

    return result;
  };

  inline static RPG_Client_GraphicsMode stringToRPG_Client_GraphicsMode(const std::string& string_in)
  {
    RPG_Client_GraphicsModeToStringTableIterator_t iterator = myRPG_Client_GraphicsModeToStringTable.begin();
    do
    {
      if (iterator->second == string_in)
        return iterator->first;

      iterator++;
    } while (iterator != myRPG_Client_GraphicsModeToStringTable.end());

    return RPG_CLIENT_GRAPHICSMODE_INVALID;
  };

  static RPG_Client_GraphicsModeToStringTable_t myRPG_Client_GraphicsModeToStringTable;

 private:
  ACE_UNIMPLEMENTED_FUNC(RPG_Client_GraphicsModeHelper());
  ACE_UNIMPLEMENTED_FUNC(RPG_Client_GraphicsModeHelper(const RPG_Client_GraphicsModeHelper&));
  ACE_UNIMPLEMENTED_FUNC(RPG_Client_GraphicsModeHelper& operator=(const RPG_Client_GraphicsModeHelper&));
};

#endif
